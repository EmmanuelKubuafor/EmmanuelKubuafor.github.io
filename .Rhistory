values = c("TRUE" = "#e41a1c", "FALSE" = "#999999"),
labels = c("Not Significant", "Significant"),
name = "Spatial Autocorr."
) +
labs(
title = "Global Moran’s I for U.S. Cancer Mortality Rates (by Site)",
subtitle = "Higher values = stronger spatial clustering across states\nP-values shown next to bars",
x = "Cancer Site", y = "Moran’s I"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
axis.text.y = element_text(size = 10)
) +
expand_limits(y = max(morans_results$Moran_I, na.rm = TRUE) + 0.05)
# Bar plot of total deaths by cancer site
ggplot(cancer_summary, aes(x = reorder(CancerSite, -Total_Deaths), y = Total_Deaths)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Cancer Deaths by Cancer Type", y = "Total Deaths", x = "Cancer Type") +
theme_minimal()
library(tigris)
library(sf)
library(ggplot2)
library(dplyr)
library(readxl)
# Load cancer mortality dataset
data <- read_excel("C:/Users/ekubu/Downloads/data2.xls")
#View(data)
summary(data)
# Convert to factors
data$State <- as.factor(data$State)
data$Year <- as.factor(data$Year)
data$CancerSite <- as.factor(data$CancerSite)
library(psych)
# Descriptive statistics: overall
describe(data[, c("Deaths", "Population", "Rate")])
# Summary by Cancer Site
cancer_summary <- data %>%
group_by(CancerSite) %>%
summarise(
Mean_Rate = mean(Rate, na.rm = TRUE),
Median_Rate = median(Rate, na.rm = TRUE),
SD_Rate = sd(Rate, na.rm = TRUE),
Min_Rate = min(Rate, na.rm = TRUE),
Max_Rate = max(Rate, na.rm = TRUE),
Total_Deaths = sum(Deaths, na.rm = TRUE)
) %>%
arrange(desc(Total_Deaths))
# Summary by State
state_summary <- data %>%
group_by(State) %>%
summarise(
Mean_Rate = mean(Rate, na.rm = TRUE),
Total_Deaths = sum(Deaths, na.rm = TRUE),
Population = mean(Population, na.rm = TRUE)
) %>%
arrange(desc(Total_Deaths))
# Summary by Year
year_summary <- data %>%
group_by(Year) %>%
summarise(
Mean_Rate = mean(Rate, na.rm = TRUE),
Total_Deaths = sum(Deaths, na.rm = TRUE)
)
# View summaries
print(cancer_summary)
print(state_summary)
print(year_summary)
# Bar plot of total deaths by cancer site
ggplot(cancer_summary, aes(x = reorder(CancerSite, -Total_Deaths), y = Total_Deaths)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Cancer Deaths by Cancer Type", y = "Total Deaths", x = "Cancer Type") +
theme_minimal()
# Boxplot of cancer rates by cancer site
ggplot(data, aes(x = CancerSite, y = Rate)) +
geom_boxplot() +
coord_flip() +
labs(title = "Distribution of Cancer Mortality Rates by Cancer Site") +
theme_minimal()
data_filtered <- data %>%
filter(CancerSite %in% valid_sites)
# Bar plot of total deaths by cancer site
ggplot(cancer_summary, aes(x = reorder(CancerSite, -Total_Deaths), y = Total_Deaths)) +
geom_bar(stat = "identity", fill = "darkred") +
coord_flip() +
labs(title = "Total Cancer Deaths by Cancer Type", y = "Total Deaths", x = "Cancer Type") +
theme_minimal()
# Boxplot of cancer rates by cancer site
ggplot(data, aes(x = CancerSite, y = Rate)) +
geom_boxplot() +
coord_flip() +
labs(title = "Distribution of Cancer Mortality Rates by Cancer Site") +
theme_minimal()
# Load U.S. state shapefile
library(tigris)
library(sf)
options(tigris_use_cache = TRUE)
states_sf <- states(cb = TRUE, resolution = "20m", year = 2021) %>%
st_transform(crs = 4326)
# Optionally filter out non-continental states
states_sf <- states_sf %>%
filter(!NAME %in% c("Alaska", "Hawaii", "Puerto Rico"))
library(tidyverse)
library(cluster)
library(factoextra)
library(reshape2)
# Step 1: Prepare the data - pivot by cancer type
df_cluster <- data %>%
group_by(State,CancerSite) %>%
summarise(AvgRate = mean(Rate, na.rm = TRUE)) %>%
pivot_wider(names_from = CancerSite, values_from = AvgRate) %>%
column_to_rownames("State") %>%
na.omit()  # remove states with missing cancer site data
# Step 2: Normalize the data (z-scores)
df_scaled <- scale(df_cluster)
# Step 3: Determine optimal clusters (Elbow method)
fviz_nbclust(df_scaled, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = "dashed") +
labs(title = "Elbow Method: Optimal Number of Clusters")
# Step 4: Run K-means with k = 3
set.seed(123)
km_result <- kmeans(df_scaled, centers = 3, nstart = 25)
# Step 5: Create a cluster assignment dataframe
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
# Step 6: Merge with state shapefile for mapping
map_clusters <- states_sf %>%
left_join(cluster_assignments, by = c("NAME" = "State")) %>%
filter(!NAME %in% c("Alaska", "Hawaii", "Puerto Rico"))
# Step 1: Keep only cancer sites present in all 51 states (including DC)
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
site_counts
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
site_counts
data_filtered <- data %>%
filter(CancerSite %in% site_counts$CancerSite)
ata_filtered
data_filtered
site_counts
# Install and load required libraries
library(tidyverse)
library(cluster)
library(factoextra)
library(sf)
library(RColorBrewer)
library(forcats)
# Step 1: Keep only cancer sites present in all 51 states (including DC)
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
data_filtered <- data %>%
filter(CancerSite %in% site_counts$CancerSite)
# Step 2: Create state × cancer site matrix
df_cluster <- data_filtered %>%
group_by(State, CancerSite) %>%
summarise(AvgRate = mean(Rate, na.rm = TRUE)) %>%
pivot_wider(names_from = CancerSite, values_from = AvgRate) %>%
column_to_rownames("State") %>%
na.omit()
# Step 3: Normalize
df_scaled <- scale(df_cluster)
# Step 4: K-means clustering (k = 3)
set.seed(123)
km_result <- kmeans(df_scaled, centers = 3, nstart = 25)
# Step 5: Cluster assignments
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
# Step 6: Clean merge using uppercase names
cluster_assignments$State <- toupper(cluster_assignments$State)
states_sf$NAME <- toupper(states_sf$NAME)
# Step 7: Merge into spatial frame
map_clusters <- states_sf %>%
left_join(cluster_assignments, by = c("NAME" = "State"))
# Step 8: Filter for contiguous U.S. only (exclude Alaska, Hawaii, PR, and U.S. territories)
map_clusters <- map_clusters %>%
filter(
!NAME %in% c("ALASKA", "HAWAII", "PUERTO RICO"),
!GEOID %in% c("60", "66", "69", "78"),    # U.S. territories: AS, GU, MP, VI
!is.na(Cluster)                           # Final cleanup: no NA clusters
)
# Step 9: Final map
ggplot(map_clusters) +
geom_sf(aes(fill = Cluster), color = "white", size = 0.2) +
scale_fill_brewer(palette = "Set2", name = "State Cluster") +
labs(
title = "Clusters of U.S. States by Cancer Mortality",
subtitle = "Contiguous U.S. | K-means based on age-adjusted rates (1999–2021)",
caption = "Data: CDC WONDER"
) +
coord_sf(expand = TRUE) +
theme_void(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5, size = 18),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(hjust = 0, size = 10, color = "grey40"),
legend.position = "bottom",
legend.title = element_text(size = 10),
legend.text = element_text(size = 9),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# Load libraries
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
# Step 1: Filter to only cancer sites reported in all 51 states
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
data_filtered <- data %>%
filter(CancerSite %in% site_counts$CancerSite)
# Step 2: Pivot to state × cancer site matrix
df_cluster <- data_filtered %>%
group_by(State, CancerSite) %>%
summarise(AvgRate = mean(Rate, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = CancerSite, values_from = AvgRate) %>%
column_to_rownames("State") %>%
as.data.frame() %>%
na.omit()
# Step 3: Scale the data
df_scaled <- scale(df_cluster)
# Step 4: Run K-means clustering
set.seed(123)
km_result <- kmeans(df_scaled, centers = 3, nstart = 25)
# Step 5: Add cluster labels
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
# Step 6: Merge for heatmap
df_scaled_labeled <- df_scaled %>%
as.data.frame() %>%
rownames_to_column("State") %>%
left_join(cluster_assignments, by = "State") %>%
filter(!is.na(Cluster))
# Step 7: Average profiles by cluster
cluster_profiles <- df_scaled_labeled %>%
select(-State) %>%
group_by(Cluster) %>%
summarise_all(\(x) mean(x, na.rm = TRUE)) %>%
column_to_rownames("Cluster") %>%
as.data.frame()
# Step 8: Remove columns with non-finite values
cluster_profiles <- cluster_profiles[, sapply(cluster_profiles, function(x) all(is.finite(x)))]
# Step 9: Plot heatmap
pheatmap(
as.matrix(cluster_profiles),
cluster_rows = FALSE,
cluster_cols = TRUE,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
main = "Cluster Profiles by Cancer Type",
fontsize_row = 12,
fontsize_col = 10,
border_color = NA,
angle_col = 45,
cellwidth = 40,
cellheight = 25
)
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
view(cluster_assignments)
data_filtered
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
view(cluster_assignments)
#Create a long-format version of the cluster profiles
cluster_summary <- cluster_profiles %>%
rownames_to_column("Cluster") %>%
pivot_longer(-Cluster, names_to = "CancerSite", values_to = "Zscore") %>%
mutate(
Pattern = case_when(
Zscore >= 0.75 ~ "High",
Zscore <= -0.75 ~ "Low",
TRUE ~ "Average"
)
) %>%
arrange(Cluster, desc(abs(Zscore)))
library(knitr)
kable(cluster_summary, caption = "Cancer Type Profiles by Cluster")
# Load libraries
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
# Step 1: Filter to only cancer sites reported in all 51 states
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
data_filtered <- data %>%
filter(CancerSite %in% site_counts$CancerSite)
# Step 2: Pivot to state × cancer site matrix
df_cluster <- data_filtered %>%
group_by(State, CancerSite) %>%
summarise(AvgRate = mean(Rate, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = CancerSite, values_from = AvgRate) %>%
column_to_rownames("State") %>%
as.data.frame() %>%
na.omit()
# Step 3: Scale the data
df_scaled <- scale(df_cluster)
# Step 4: Run K-means clustering
set.seed(123)
km_result <- kmeans(df_scaled, centers = 3, nstart = 25)
# Step 5: Add cluster labels
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
# Step 6: Merge for heatmap
df_scaled_labeled <- df_scaled %>%
as.data.frame() %>%
rownames_to_column("State") %>%
left_join(cluster_assignments, by = "State") %>%
filter(!is.na(Cluster))
# Step 7: Average profiles by cluster
cluster_profiles <- df_scaled_labeled %>%
select(-State) %>%
group_by(Cluster) %>%
summarise_all(\(x) mean(x, na.rm = TRUE)) %>%
column_to_rownames("Cluster") %>%
as.data.frame()
# Step 8: Remove columns with non-finite values
cluster_profiles <- cluster_profiles[, sapply(cluster_profiles, function(x) all(is.finite(x)))]
# Step 9: Plot heatmap
pheatmap(
as.matrix(cluster_profiles),
cluster_rows = FALSE,
cluster_cols = TRUE,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
main = "Cluster Profiles by Cancer Type",
fontsize_row = 12,
fontsize_col = 10,
border_color = NA,
angle_col = 45,
cellwidth = 40,
cellheight = 25
)
#Create a long-format version of the cluster profiles
cluster_summary <- cluster_profiles %>%
rownames_to_column("Cluster") %>%
pivot_longer(-Cluster, names_to = "CancerSite", values_to = "Zscore") %>%
mutate(
Pattern = case_when(
Zscore >= 0.75 ~ "High",
Zscore <= -0.75 ~ "Low",
TRUE ~ "Average"
)
) %>%
arrange(Cluster, desc(abs(Zscore)))
library(knitr)
kable(cluster_summary, caption = "Cancer Type Profiles by Cluster")
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
view(cluster_assignments)
site_counts
# Load libraries
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
# Step 1: Filter to only cancer sites reported in all 51 states
site_counts <- data %>%
count(CancerSite, State) %>%
count(CancerSite) %>%
filter(n == 51)
data_filtered <- data %>%
filter(CancerSite %in% site_counts$CancerSite)
# Step 2: Pivot to state × cancer site matrix
df_cluster <- data_filtered %>%
group_by(State, CancerSite) %>%
summarise(AvgRate = mean(Rate, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = CancerSite, values_from = AvgRate) %>%
column_to_rownames("State") %>%
as.data.frame() %>%
na.omit()
# Step 3: Scale the data
df_scaled <- scale(df_cluster)
# Step 4: Run K-means clustering
set.seed(123)
km_result <- kmeans(df_scaled, centers = 3, nstart = 25)
# Step 5: Add cluster labels
cluster_assignments <- data.frame(
State = rownames(df_scaled),
Cluster = factor(km_result$cluster)
)
# Step 6: Merge for heatmap
df_scaled_labeled <- df_scaled %>%
as.data.frame() %>%
rownames_to_column("State") %>%
left_join(cluster_assignments, by = "State") %>%
filter(!is.na(Cluster))
# Step 7: Average profiles by cluster
cluster_profiles <- df_scaled_labeled %>%
select(-State) %>%
group_by(Cluster) %>%
summarise_all(\(x) mean(x, na.rm = TRUE)) %>%
column_to_rownames("Cluster") %>%
as.data.frame()
# Step 8: Remove columns with non-finite values
cluster_profiles <- cluster_profiles[, sapply(cluster_profiles, function(x) all(is.finite(x)))]
# Step 9: Plot heatmap
pheatmap(
as.matrix(cluster_profiles),
cluster_rows = FALSE,
cluster_cols = TRUE,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdBu")))(100),
main = "Cluster Profiles by Cancer Type",
fontsize_row = 12,
fontsize_col = 10,
border_color = NA,
angle_col = 90,
cellwidth = 40,
cellheight = 25
)
data_filtered$CancerSite
length(unique(data_filtered$CancerSite))
df_cluster
df_scaled
km_result
km_result$cluster
opt_k <- fviz_nbclust(df_scaled, kmeans, method = "silhouette")$data
best_k <- which.max(opt_k$y)
best_k
set.seed(123)
gap_stat <- clusGap(df_scaled, FUN = kmeans, nstart = 25, K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
fviz_gap_stat(gap_stat)
fviz_nbclust(df_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
fviz_nbclust(df_scaled, kmeans, method = "silhouette") +
labs(title = "Silhouette Method for Optimal K")
fviz_nbclust(df_scaled, kmeans, method = "wss") +
labs(title = "Elbow Method for Optimal K")
df_scaled_labeled
view(df_scaled_labeled)
# Step 7: Average profiles by cluster
cluster_profiles <- df_scaled_labeled %>%
select(-State) %>%
group_by(Cluster) %>%
summarise_all(\(x) mean(x, na.rm = TRUE)) %>%
column_to_rownames("Cluster") %>%
as.data.frame()
cluster_profiles
# Step 8: Remove columns with non-finite values
cluster_profiles <- cluster_profiles[, sapply(cluster_profiles, function(x) all(is.finite(x)))]
cluster_profiles
install.packages("circlize")
library(circlize)
Heatmap(
as.matrix(cluster_profiles),
name = "Z-score",
col = colorRamp2(c(-2, 0, 2), c("blue", "white", "red")),
column_names_rot = 90,
row_names_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
heatmap_legend_param = list(title = "Z-score", legend_direction = "horizontal")
)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(BiocManager)
library(circlize)
Heatmap(
as.matrix(cluster_profiles),
name = "Z-score",
col = colorRamp2(c(-2, 0, 2), c("blue", "white", "red")),
column_names_rot = 90,
row_names_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
heatmap_legend_param = list(title = "Z-score", legend_direction = "horizontal")
)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(circlize)
Heatmap(
as.matrix(cluster_profiles),
name = "Z-score",
col = colorRamp2(c(-2, 0, 2), c("blue", "white", "red")),
column_names_rot = 90,
row_names_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
heatmap_legend_param = list(title = "Z-score", legend_direction = "horizontal")
)
find.package("ComplexHeatmap")
